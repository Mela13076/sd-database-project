{"ast":null,"code":"var _jsxFileName = \"/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport './search.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Search(props) {\n  _s();\n  //const { data, setData } = props;\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n  // Filter the data based on the query string and filter type\n  const filterData = () => {\n    const filteredData = data.filter(row => {\n      console.log(filterData);\n      const queryStr = query.trim().toLowerCase();\n      if (filterType === 'pressure_id') {\n        // Check for a match against the ID column\n        return String(row.id).startsWith(parseInt(queryStr));\n      } else if (filterType === 'date_collected') {\n        const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n        const queryDate = new Date(queryStr);\n        // Check for a match against the date column or time column\n        return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n      } else if (filterType === 'pressure_value') {\n        return String(row.value).startsWith(parseInt(queryStr));\n      } else if (filterType === 'tech_name') {\n        // Check for a match against the name column\n        return row.name.toLowerCase().includes(queryStr);\n      } else if (filterType === 'serial_num') {\n        // Check for a match against the email column\n        return String(row.serial).startsWith(parseInt(queryStr));\n      } else if (filterType === 'pass_fail') {\n        return row.test.toLowerCase().includes(queryStr);\n      } else {\n        return true; // No filter type selected, return all rows\n      }\n    });\n\n    setData(filteredData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: query,\n      onChange: e => setQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: filterType,\n      onChange: e => setFilterType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"id\",\n        children: \"ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"date\",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"value\",\n        children: \"Pressure Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"serial\",\n        children: \"Serial Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"test\",\n        children: \"Test Scoring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: filterData,\n      children: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setData(data),\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"hcpxRpZh0s2vCF2TJgX2Y2O4h/8=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","Search","props","query","setQuery","filterType","setFilterType","filterData","filteredData","data","filter","row","console","log","queryStr","trim","toLowerCase","String","id","startsWith","parseInt","date","Date","queryDate","toDateString","toLocaleTimeString","includes","value","name","serial","test","setData","e","target"],"sources":["/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js"],"sourcesContent":["import './search.css';\nimport React, { useState } from 'react';\n\nfunction Search (props) {\n  //const { data, setData } = props;\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n  // Filter the data based on the query string and filter type\n  const filterData = () => {\n    const filteredData = data.filter((row) => {\n      console.log(filterData)\n      const queryStr = query.trim().toLowerCase();\n\n      if (filterType === 'pressure_id') {\n        // Check for a match against the ID column\n        return String(row.id).startsWith(parseInt(queryStr));\n      } else if (filterType === 'date_collected') {\n        const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n        const queryDate = new Date(queryStr);\n        // Check for a match against the date column or time column\n        return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n      } else if (filterType === 'pressure_value'){\n        return String(row.value).startsWith(parseInt(queryStr));\n      }else if (filterType === 'tech_name') {\n        // Check for a match against the name column\n        return row.name.toLowerCase().includes(queryStr);\n      } else if (filterType === 'serial_num') {\n        // Check for a match against the email column\n        return String(row.serial).startsWith(parseInt(queryStr));\n      } else if (filterType === 'pass_fail'){\n        return row.test.toLowerCase().includes(queryStr);\n      }else {\n        return true; // No filter type selected, return all rows\n      }\n    });\n\n    setData(filteredData);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n      <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n        <option value=\"id\">ID</option>\n        <option value=\"date\">Date</option>\n        <option value=\"value\">Pressure Value</option>\n        <option value=\"name\">Name</option>\n        <option value=\"serial\">Serial Number</option>\n        <option value=\"test\">Test Scoring</option>\n        \n      </select>\n\n      <button onClick={filterData}>Filter</button>\n      <button onClick={() => setData(data)}>Reset</button>\n    </div>\n  );\n}\n\nexport default Search;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}