{"ast":null,"code":"var _jsxFileName = \"/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js\",\n  _s = $RefreshSig$();\n//Current code: \n\n// import './search.css';\n// import React, { useState } from 'react';\n\n// function Search(props){\n//   const { data, setData } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n// const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       for (let i = 0; i < filters.length; i++) {\n//         const filter = filters[i];\n//         const queryStr = filter.query.trim().toLowerCase();\n\n//         if (filter.type === 'tech_name' && !row.tech_name.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'pressure_value' && !row.pressure_value.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'serial_num' && !row.serial_num.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'date_collected' && !row.date_collected.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'job_num' && !row.job_num.toLowerCase().includes(queryStr)) {\n//           return false;\n//         }\n//       }\n//       return true; // All filters passed\n//     });\n//     setFilteredData(filteredData);\n//   };\n\n// Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"tech_name\">Name</option>\n//                       <option value=\"pressure_value\">Pressure Value</option>\n//                       <option value=\"date_collected\">Date</option>\n//                       <option value=\"job_num\">Job Number</option>\n//                       <option value=\"serial_num\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n\n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n//Current Testing Code: \n// import { useState } from \"react\";\n\n// function Search(props) {\n//   const [query, setQuery] = useState(\"\");\n\n//   const handleInputChange = (event) => {\n//     const value = event.target.value;\n//     setQuery(value);\n\n//     // Filter the data based on the query\n//     const filtered = props.data.filter((item) => {\n//       const isMatched = (\n//         item.date_collected.toLowerCase().includes(value.toLowerCase()) ||\n//         item.time_collected.toLowerCase().includes(value.toLowerCase()) ||\n//         item.pressure_value.toLowerCase().includes(value.toLowerCase()) ||\n//         item.tech_name.toLowerCase().includes(value.toLowerCase()) ||\n//         item.job_num.toLowerCase().includes(value.toLowerCase()) ||\n//         item.serial_num.toLowerCase().includes(value.toLowerCase()) ||\n//         item.notes.toLowerCase().includes(value.toLowerCase())\n//       );\n//       console.log(item, isMatched);\n//       return isMatched;\n//     });\n\n//     props.handleFilter(filtered);\n//   };\n\n//   const handleReset = () => {\n//     setQuery(\"\");\n//     props.handleFilter([]);\n//   };\n\n//   return (\n//     <div className=\"search\">\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search...\"\n//         value={query}\n//         onChange={handleInputChange}\n//       />\n//       <button onClick={handleReset}>Reset</button>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n//import React, { useState, useEffect } from 'react';\n\n// function Search(props) {\n//   const { onFilterChange } = props;\n\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Update the filter state when the input value changes\n//   const handleInputChange = (event, index) => {\n//     const newFilters = [...filters];\n//     newFilters[index].query = event.target.value;\n//     setFilters(newFilters);\n//   };\n\n//   // Add a new filter to the state\n//   const addFilter = () => {\n//     setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter from the state\n//   const removeFilter = (index) => {\n//     const newFilters = [...filters];\n//     newFilters.splice(index, 1);\n//     setFilters(newFilters);\n//   };\n\n//   // Apply the filters when the search button is clicked\n//   const handleSearch = () => {\n//     onFilterChange(filters);\n//   };\n\n//   // Reset the filters when the reset button is clicked\n//   const handleReset = () => {\n//     setFilters([{ type: 'name', query: '' }]);\n//     onFilterChange([]);\n//   };\n\n//   return (\n//     <div className='search-container'>\n//       {filters.map((filter, index) => (\n//         <div key={index} className='search-row'>\n//           <select\n//             value={filter.type}\n//             onChange={(event) => {\n//               const newFilters = [...filters];\n//               newFilters[index].type = event.target.value;\n//               setFilters(newFilters);\n//             }}\n//           >\n//             <option value='name'>Name</option>\n//             <option value='pressure'>Pressure</option>\n//             <option value='serialnum'>Serial Number</option>\n//             <option value='date'>Date</option>\n//             <option value='jobnum'>Job Number</option>\n//           </select>\n//           <input\n//             type='text'\n//             value={filter.query}\n//             onChange={(event) => handleInputChange(event, index)}\n//           />\n//           {index > 0 && (\n//             <button type='button' onClick={() => removeFilter(index)}>\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n//       <div className='search-row'>\n//         <button type='button' onClick={addFilter}>\n//           Add Filter\n//         </button>\n//         <button type='button' onClick={handleSearch}>\n//           Search\n//         </button>\n//         <button type='button' onClick={handleReset}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Search(props) {\n  _s();\n  const {\n    data,\n    setFilteredData,\n    handleFilter\n  } = props;\n  const [filters, setFilters] = useState({\n    tech_name: \"\",\n    pressure_value: \"\",\n    date_collected: \"\",\n    job_num: \"\",\n    serial_num: \"\"\n  });\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFilters(prevFilters => ({\n      ...prevFilters,\n      [name]: value\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const filtered = data.filter(item => {\n      return item.tech_name.toLowerCase().includes(filters.tech_name.toLowerCase()) && item.pressure_value.toString().includes(filters.pressure_value) && item.date_collected.includes(filters.date_collected) && item.job_num.includes(filters.job_num) && item.serial_num.includes(filters.serial_num);\n    });\n    setFilteredData(filtered);\n    handleFilter(filtered);\n  };\n  const handleReset = () => {\n    setFilteredData([]);\n    setFilters({\n      tech_name: \"\",\n      pressure_value: \"\",\n      date_collected: \"\",\n      job_num: \"\",\n      serial_num: \"\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"search-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Technician Name\",\n        name: \"tech_name\",\n        value: filters.tech_name,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Pressure Value\",\n        name: \"pressure_value\",\n        value: filters.pressure_value,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Date Collected\",\n        name: \"date_collected\",\n        value: filters.date_collected,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Job Number\",\n        name: \"job_num\",\n        value: filters.job_num,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Serial Number\",\n        name: \"serial_num\",\n        value: filters.serial_num,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"xDgNSa8L4nKNfMo0dli1QBa7x+Q=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","Search","props","data","setFilteredData","handleFilter","filters","setFilters","tech_name","pressure_value","date_collected","job_num","serial_num","handleInputChange","event","name","value","target","prevFilters","handleSubmit","preventDefault","filtered","filter","item","toLowerCase","includes","toString","handleReset"],"sources":["/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js"],"sourcesContent":["//Current code: \n\n// import './search.css';\n// import React, { useState } from 'react';\n\n// function Search(props){\n//   const { data, setData } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n\n// const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       for (let i = 0; i < filters.length; i++) {\n//         const filter = filters[i];\n//         const queryStr = filter.query.trim().toLowerCase();\n  \n//         if (filter.type === 'tech_name' && !row.tech_name.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'pressure_value' && !row.pressure_value.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'serial_num' && !row.serial_num.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'date_collected' && !row.date_collected.toLowerCase().includes(queryStr)) {\n//           return false;\n//         } else if (filter.type === 'job_num' && !row.job_num.toLowerCase().includes(queryStr)) {\n//           return false;\n//         }\n//       }\n//       return true; // All filters passed\n//     });\n//     setFilteredData(filteredData);\n//   };\n  \n\n  // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"tech_name\">Name</option>\n//                       <option value=\"pressure_value\">Pressure Value</option>\n//                       <option value=\"date_collected\">Date</option>\n//                       <option value=\"job_num\">Job Number</option>\n//                       <option value=\"serial_num\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n          \n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n\n\n//Current Testing Code: \n// import { useState } from \"react\";\n\n// function Search(props) {\n//   const [query, setQuery] = useState(\"\");\n\n//   const handleInputChange = (event) => {\n//     const value = event.target.value;\n//     setQuery(value);\n  \n//     // Filter the data based on the query\n//     const filtered = props.data.filter((item) => {\n//       const isMatched = (\n//         item.date_collected.toLowerCase().includes(value.toLowerCase()) ||\n//         item.time_collected.toLowerCase().includes(value.toLowerCase()) ||\n//         item.pressure_value.toLowerCase().includes(value.toLowerCase()) ||\n//         item.tech_name.toLowerCase().includes(value.toLowerCase()) ||\n//         item.job_num.toLowerCase().includes(value.toLowerCase()) ||\n//         item.serial_num.toLowerCase().includes(value.toLowerCase()) ||\n//         item.notes.toLowerCase().includes(value.toLowerCase())\n//       );\n//       console.log(item, isMatched);\n//       return isMatched;\n//     });\n  \n//     props.handleFilter(filtered);\n//   };\n\n//   const handleReset = () => {\n//     setQuery(\"\");\n//     props.handleFilter([]);\n//   };\n\n//   return (\n//     <div className=\"search\">\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search...\"\n//         value={query}\n//         onChange={handleInputChange}\n//       />\n//       <button onClick={handleReset}>Reset</button>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n\n\n\n\n\n\n\n\n\n\n//import React, { useState, useEffect } from 'react';\n\n// function Search(props) {\n//   const { onFilterChange } = props;\n\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Update the filter state when the input value changes\n//   const handleInputChange = (event, index) => {\n//     const newFilters = [...filters];\n//     newFilters[index].query = event.target.value;\n//     setFilters(newFilters);\n//   };\n\n//   // Add a new filter to the state\n//   const addFilter = () => {\n//     setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter from the state\n//   const removeFilter = (index) => {\n//     const newFilters = [...filters];\n//     newFilters.splice(index, 1);\n//     setFilters(newFilters);\n//   };\n\n//   // Apply the filters when the search button is clicked\n//   const handleSearch = () => {\n//     onFilterChange(filters);\n//   };\n\n//   // Reset the filters when the reset button is clicked\n//   const handleReset = () => {\n//     setFilters([{ type: 'name', query: '' }]);\n//     onFilterChange([]);\n//   };\n\n//   return (\n//     <div className='search-container'>\n//       {filters.map((filter, index) => (\n//         <div key={index} className='search-row'>\n//           <select\n//             value={filter.type}\n//             onChange={(event) => {\n//               const newFilters = [...filters];\n//               newFilters[index].type = event.target.value;\n//               setFilters(newFilters);\n//             }}\n//           >\n//             <option value='name'>Name</option>\n//             <option value='pressure'>Pressure</option>\n//             <option value='serialnum'>Serial Number</option>\n//             <option value='date'>Date</option>\n//             <option value='jobnum'>Job Number</option>\n//           </select>\n//           <input\n//             type='text'\n//             value={filter.query}\n//             onChange={(event) => handleInputChange(event, index)}\n//           />\n//           {index > 0 && (\n//             <button type='button' onClick={() => removeFilter(index)}>\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n//       <div className='search-row'>\n//         <button type='button' onClick={addFilter}>\n//           Add Filter\n//         </button>\n//         <button type='button' onClick={handleSearch}>\n//           Search\n//         </button>\n//         <button type='button' onClick={handleReset}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\n\n\n\n\nimport React, { useState } from \"react\";\n\nfunction Search(props) {\n  const { data, setFilteredData, handleFilter } = props;\n\n  const [filters, setFilters] = useState({\n    tech_name: \"\",\n    pressure_value: \"\",\n    date_collected: \"\",\n    job_num: \"\",\n    serial_num: \"\",\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setFilters((prevFilters) => ({\n      ...prevFilters,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const filtered = data.filter((item) => {\n      return (\n        item.tech_name.toLowerCase().includes(filters.tech_name.toLowerCase()) &&\n        item.pressure_value.toString().includes(filters.pressure_value) &&\n        item.date_collected.includes(filters.date_collected) &&\n        item.job_num.includes(filters.job_num) &&\n        item.serial_num.includes(filters.serial_num)\n      );\n    });\n    setFilteredData(filtered);\n    handleFilter(filtered);\n  };\n\n  const handleReset = () => {\n    setFilteredData([]);\n    setFilters({\n      tech_name: \"\",\n      pressure_value: \"\",\n      date_collected: \"\",\n      job_num: \"\",\n      serial_num: \"\",\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"search-form\">\n      <div className=\"search-inputs\">\n        <input\n          type=\"text\"\n          placeholder=\"Technician Name\"\n          name=\"tech_name\"\n          value={filters.tech_name}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Pressure Value\"\n          name=\"pressure_value\"\n          value={filters.pressure_value}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Date Collected\"\n          name=\"date_collected\"\n          value={filters.date_collected}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Job Number\"\n          name=\"job_num\"\n          value={filters.job_num}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Serial Number\"\n          name=\"serial_num\"\n          value={filters.serial_num}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=\"search-buttons\">\n        <button type=\"submit\">Filter</button>\n        <button type=\"button\" onClick={handleReset}>\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Search;\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAYA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}