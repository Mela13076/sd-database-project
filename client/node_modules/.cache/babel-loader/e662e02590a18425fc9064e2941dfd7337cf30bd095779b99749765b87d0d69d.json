{"ast":null,"code":"var _jsxFileName = \"/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport './search.css';\nimport React, { useState } from 'react';\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\n\n// function Search(props){\n//   const { data, setData } = props;\n//   //const { characters, setFilteredCharacters } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n//   // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"name\">Name</option>\n//                       <option value=\"pressure\">Pressure Value</option>\n//                       <option value=\"date\">Date</option>\n//                       <option value=\"jobnum\">Job Number</option>\n//                       <option value=\"serialnum\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n\n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n//import React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Search(props) {\n  _s();\n  const {\n    onFilterChange\n  } = props;\n  const [filters, setFilters] = useState([{\n    type: 'name',\n    query: ''\n  }]);\n\n  // Update the filter state when the input value changes\n  const handleInputChange = (event, index) => {\n    const newFilters = [...filters];\n    newFilters[index].query = event.target.value;\n    setFilters(newFilters);\n  };\n\n  // Add a new filter to the state\n  const addFilter = () => {\n    setFilters([...filters, {\n      type: 'name',\n      query: ''\n    }]);\n  };\n\n  // Remove a filter from the state\n  const removeFilter = index => {\n    const newFilters = [...filters];\n    newFilters.splice(index, 1);\n    setFilters(newFilters);\n  };\n\n  // Apply the filters when the search button is clicked\n  const handleSearch = () => {\n    onFilterChange(filters);\n  };\n\n  // Reset the filters when the reset button is clicked\n  const handleReset = () => {\n    setFilters([{\n      type: 'name',\n      query: ''\n    }]);\n    onFilterChange([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [filters.map((filter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: filter.type,\n        onChange: event => {\n          const newFilters = [...filters];\n          newFilters[index].type = event.target.value;\n          setFilters(newFilters);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pressure\",\n          children: \"Pressure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"serialnum\",\n          children: \"Serial Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"date\",\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"jobnum\",\n          children: \"Job Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: filter.query,\n        onChange: event => handleInputChange(event, index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => removeFilter(index),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addFilter,\n        children: \"Add Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"9T0q8xCpHrMjusxY1F0Q4Mef3mM=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","Search","props","onFilterChange","filters","setFilters","type","query","handleInputChange","event","index","newFilters","target","value","addFilter","removeFilter","splice","handleSearch","handleReset","map","filter"],"sources":["/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js"],"sourcesContent":["import './search.css';\nimport React, { useState } from 'react';\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\n\n\n// function Search(props){\n//   const { data, setData } = props;\n//   //const { characters, setFilteredCharacters } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n//   // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"name\">Name</option>\n//                       <option value=\"pressure\">Pressure Value</option>\n//                       <option value=\"date\">Date</option>\n//                       <option value=\"jobnum\">Job Number</option>\n//                       <option value=\"serialnum\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n          \n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n\n\n\n// export default Search;\n\n//import React, { useState, useEffect } from 'react';\n\nfunction Search(props) {\n  const { onFilterChange } = props;\n\n  const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n  // Update the filter state when the input value changes\n  const handleInputChange = (event, index) => {\n    const newFilters = [...filters];\n    newFilters[index].query = event.target.value;\n    setFilters(newFilters);\n  };\n\n  // Add a new filter to the state\n  const addFilter = () => {\n    setFilters([...filters, { type: 'name', query: '' }]);\n  };\n\n  // Remove a filter from the state\n  const removeFilter = (index) => {\n    const newFilters = [...filters];\n    newFilters.splice(index, 1);\n    setFilters(newFilters);\n  };\n\n  // Apply the filters when the search button is clicked\n  const handleSearch = () => {\n    onFilterChange(filters);\n  };\n\n  // Reset the filters when the reset button is clicked\n  const handleReset = () => {\n    setFilters([{ type: 'name', query: '' }]);\n    onFilterChange([]);\n  };\n\n  return (\n    <div className='search-container'>\n      {filters.map((filter, index) => (\n        <div key={index} className='search-row'>\n          <select\n            value={filter.type}\n            onChange={(event) => {\n              const newFilters = [...filters];\n              newFilters[index].type = event.target.value;\n              setFilters(newFilters);\n            }}\n          >\n            <option value='name'>Name</option>\n            <option value='pressure'>Pressure</option>\n            <option value='serialnum'>Serial Number</option>\n            <option value='date'>Date</option>\n            <option value='jobnum'>Job Number</option>\n          </select>\n          <input\n            type='text'\n            value={filter.query}\n            onChange={(event) => handleInputChange(event, index)}\n          />\n          {index > 0 && (\n            <button type='button' onClick={() => removeFilter(index)}>\n              X\n            </button>\n          )}\n        </div>\n      ))}\n      <div className='search-row'>\n        <button type='button' onClick={addFilter}>\n          Add Filter\n        </button>\n        <button type='button' onClick={handleSearch}>\n          Search\n        </button>\n        <button type='button' onClick={handleReset}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}