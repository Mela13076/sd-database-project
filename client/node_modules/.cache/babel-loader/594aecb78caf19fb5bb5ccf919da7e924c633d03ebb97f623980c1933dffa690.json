{"ast":null,"code":"var _jsxFileName = \"/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/Table/table.js\",\n  _s = $RefreshSig$();\nimport './table.css';\nimport Search from '../search/search';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Make an HTTP GET request to the backend server using Axios\n    axios.get('http://localhost:3001/data').then(response => {\n      // Set the data state variable with the response data\n      setData(response.data);\n      //console.log(data)\n    }).catch(error => {\n      // Handle any errors that occur during the request\n      console.error(error);\n    });\n  }, []);\n\n  // Helper function to format the date string\n  const formatDate = dateString => {\n    if (!dateString) {\n      return ''; // Return empty string if dateString is null or undefined\n    }\n\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${month}-${day}-${year}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      data: data,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tableSec\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"blueTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Pressure Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Technician Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Job Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Serial Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: data.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: formatDate(row.date_collected)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.time_collected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.pressure_value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.tech_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.job_num\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.serial_num\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.notes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this)]\n          }, row.pressure_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(Table, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Table;\nexport default Table;\n\n// TESTING CURRENTLY \n\n// function Table({data}) {\n\n//     return (\n\n//         <div className='table-sec'>\n//             <table className='blueTable'>\n//                 <thead>\n//                     <tr>\n//                         <th>Date</th>\n//                         <th>Time</th>\n//                         <th>Pressure Value</th>\n//                         <th>Technician Name</th>\n//                         <th>Job Number</th>\n//                         <th>Serial Number</th>\n//                         {/* <th>Pass/Fail</th> */}\n//                         <th>Notes</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {data.map((row ) => (\n//                         <tr key={row.pressure_id}>\n//                             <td>{row.date_collected}</td>\n//                             <td>{row.time_collected}</td>\n//                             <td>{row.pressure_value}</td>\n//                             <td>{row.tech_name}</td>\n//                             <td>{row.job_num}</td>\n//                             <td>{row.serial_num}</td>\n//                             {/* <td>{row.pass_fail}</td> */}\n//                             <td>{row.notes}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     )\n// }\n\n// export default Table;\n\n// import './table.css';\n// import Search from '../search/search';\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n\n// function Table() {\n//   const [data, setData] = useState([]);\n//   const [originalData, setOriginalData] = useState([]);\n\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:3001/api/data')\n//       .then((response) => {\n//         setData(response.data);\n//         setOriginalData(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(error);\n//       });\n//   }, []);\n\n//   const filterData = useCallback(\n//     (filters) => {\n//       const filteredData = originalData.filter((row) => {\n//         for (let i = 0; i < filters.length; i++) {\n//           const filter = filters[i];\n//           const queryStr = filter.query.trim().toLowerCase();\n\n//           if (\n//             filter.type === 'name' &&\n//             !row.tech_name.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'pressure' &&\n//             !row.pressure_value.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'serialnum' &&\n//             !row.serial_num.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'date' &&\n//             !row.date_collected.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'jobnum' &&\n//             !row.job_num.includes(queryStr)\n//           ) {\n//             return false;\n//           }\n//         }\n//         return true;\n//       });\n//       setData(filteredData);\n//     },\n//     [originalData]\n//   );\n\n//   const handleFilterChange = useCallback(\n//     (filters) => {\n//       if (filters.length === 0) {\n//         setData(originalData);\n//       } else {\n//         filterData(filters);\n//       }\n//     },\n//     [originalData, filterData]\n//   );\n\n//   return (\n//     <div>\n//       <Search onFilterChange={handleFilterChange} />\n//       <table className='blueTable'>\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Time</th>\n//             <th>Pressure Value</th>\n//             <th>Technician Name</th>\n//             <th>Job Number</th>\n//             <th>Serial Number</th>\n//             <th>Pass/Fail</th>\n//             <th>Notes</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {data.map((row) => (\n//             <tr key={row.pressure_id}>\n//               <td>{row.date_collected}</td>\n//               <td>{row.time_collected}</td>\n//               <td>{row.pressure_value}</td>\n//               <td>{row.tech_name}</td>\n//               <td>{row.job_num}</td>\n//               <td>{row.serial_num}</td>\n//               <td>{row.pass_fail}</td>\n//               <td>{row.notes}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//         <tfoot>\n//             <tr>\n//                 <td colSpan=\"4\">\n//                     <div className=\"links\"><a href=\"#\">&laquo;</a> <a className=\"active\" href=\"#\">1</a> <a href=\"#\">2</a> <a href=\"#\">3</a> <a href=\"#\">4</a> <a href=\"#\">&raquo;</a></div>\n//                 </td>\n//             </tr>\n//         </tfoot>\n//     </table>\n// </div>\n// )\n// }\n\n// export default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["Search","React","useState","useEffect","axios","Table","data","setData","get","then","response","catch","error","console","formatDate","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","map","row","date_collected","time_collected","pressure_value","tech_name","job_num","serial_num","notes","pressure_id"],"sources":["/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/Table/table.js"],"sourcesContent":["import './table.css';\nimport Search from '../search/search';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n\nfunction Table() {\n\n\n    const [data, setData] = useState([]);\n\n\n    useEffect(() => {\n        // Make an HTTP GET request to the backend server using Axios\n        axios.get('http://localhost:3001/data')\n          .then((response) => {\n            // Set the data state variable with the response data\n            setData(response.data);\n            //console.log(data)\n          })\n          .catch((error) => {\n            // Handle any errors that occur during the request\n            console.error(error);\n          });\n      }, []);\n\n    // Helper function to format the date string\n    const formatDate = (dateString) => {\n        if (!dateString) {\n            return ''; // Return empty string if dateString is null or undefined\n        }\n        const date = new Date(dateString);\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        return `${month}-${day}-${year}`;\n    }\n    \n\n    return (\n\n        <div>\n            <Search data={data} setData={setData}/>\n            <div className='tableSec'>\n                <table className='blueTable'>\n                    <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Time</th>\n                            <th>Pressure Value</th>\n                            <th>Technician Name</th>\n                            <th>Job Number</th>\n                            <th>Serial Number</th>\n                            {/* <th>Pass/Fail</th> */}\n                            <th>Notes</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((row ) => (\n                            <tr key={row.pressure_id}>\n                                <td>{formatDate(row.date_collected)}</td>\n                                <td>{row.time_collected}</td>\n                                <td>{row.pressure_value}</td>\n                                <td>{row.tech_name}</td>\n                                <td>{row.job_num}</td>\n                                <td>{row.serial_num}</td>\n                                {/* <td>{row.pass_fail}</td> */}\n                                <td>{row.notes}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Table;\n\n\n\n\n// TESTING CURRENTLY \n\n\n\n// function Table({data}) {\n\n//     return (\n\n//         <div className='table-sec'>\n//             <table className='blueTable'>\n//                 <thead>\n//                     <tr>\n//                         <th>Date</th>\n//                         <th>Time</th>\n//                         <th>Pressure Value</th>\n//                         <th>Technician Name</th>\n//                         <th>Job Number</th>\n//                         <th>Serial Number</th>\n//                         {/* <th>Pass/Fail</th> */}\n//                         <th>Notes</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {data.map((row ) => (\n//                         <tr key={row.pressure_id}>\n//                             <td>{row.date_collected}</td>\n//                             <td>{row.time_collected}</td>\n//                             <td>{row.pressure_value}</td>\n//                             <td>{row.tech_name}</td>\n//                             <td>{row.job_num}</td>\n//                             <td>{row.serial_num}</td>\n//                             {/* <td>{row.pass_fail}</td> */}\n//                             <td>{row.notes}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     )\n// }\n\n// export default Table;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import './table.css';\n// import Search from '../search/search';\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n\n// function Table() {\n//   const [data, setData] = useState([]);\n//   const [originalData, setOriginalData] = useState([]);\n\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:3001/api/data')\n//       .then((response) => {\n//         setData(response.data);\n//         setOriginalData(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(error);\n//       });\n//   }, []);\n\n//   const filterData = useCallback(\n//     (filters) => {\n//       const filteredData = originalData.filter((row) => {\n//         for (let i = 0; i < filters.length; i++) {\n//           const filter = filters[i];\n//           const queryStr = filter.query.trim().toLowerCase();\n\n//           if (\n//             filter.type === 'name' &&\n//             !row.tech_name.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'pressure' &&\n//             !row.pressure_value.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'serialnum' &&\n//             !row.serial_num.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'date' &&\n//             !row.date_collected.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'jobnum' &&\n//             !row.job_num.includes(queryStr)\n//           ) {\n//             return false;\n//           }\n//         }\n//         return true;\n//       });\n//       setData(filteredData);\n//     },\n//     [originalData]\n//   );\n\n//   const handleFilterChange = useCallback(\n//     (filters) => {\n//       if (filters.length === 0) {\n//         setData(originalData);\n//       } else {\n//         filterData(filters);\n//       }\n//     },\n//     [originalData, filterData]\n//   );\n\n//   return (\n//     <div>\n//       <Search onFilterChange={handleFilterChange} />\n//       <table className='blueTable'>\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Time</th>\n//             <th>Pressure Value</th>\n//             <th>Technician Name</th>\n//             <th>Job Number</th>\n//             <th>Serial Number</th>\n//             <th>Pass/Fail</th>\n//             <th>Notes</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {data.map((row) => (\n//             <tr key={row.pressure_id}>\n//               <td>{row.date_collected}</td>\n//               <td>{row.time_collected}</td>\n//               <td>{row.pressure_value}</td>\n//               <td>{row.tech_name}</td>\n//               <td>{row.job_num}</td>\n//               <td>{row.serial_num}</td>\n//               <td>{row.pass_fail}</td>\n//               <td>{row.notes}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//         <tfoot>\n//             <tr>\n//                 <td colSpan=\"4\">\n//                     <div className=\"links\"><a href=\"#\">&laquo;</a> <a className=\"active\" href=\"#\">1</a> <a href=\"#\">2</a> <a href=\"#\">3</a> <a href=\"#\">4</a> <a href=\"#\">&raquo;</a></div>\n//                 </td>\n//             </tr>\n//         </tfoot>\n//     </table>\n// </div>\n// )\n// }\n\n// export default Table;\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}