{"ast":null,"code":"var _jsxFileName = \"/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/Table/table.js\";\nimport './table.css';\nimport Search from '../search/search';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// function Table() {\n\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         // Make an HTTP GET request to the backend server using Axios\n//         axios.get('http://localhost:3001/data')\n//           .then((response) => {\n//             // Set the data state variable with the response data\n//             setData(response.data);\n//             //console.log(data)\n//           })\n//           .catch((error) => {\n//             // Handle any errors that occur during the request\n//             console.error(error);\n//           });\n//       }, []);\n\n//     // Helper function to format the date string\n//     const formatDate = (dateString) => {\n//         if (!dateString) {\n//             return ''; // Return empty string if dateString is null or undefined\n//         }\n//         const date = new Date(dateString);\n//         const year = date.getFullYear();\n//         const month = String(date.getMonth() + 1).padStart(2, '0');\n//         const day = String(date.getDate()).padStart(2, '0');\n//         return `${month}-${day}-${year}`;\n//     }\n\n//     const formatTime = (timeString) => {\n//         if (!timeString) {\n//             return ''; // Return empty string if timeString is null or undefined\n//         }\n//         const time = new Date(`1970-01-01T${timeString}`);\n//         const hours = time.getHours();\n//         const minutes = String(time.getMinutes()).padStart(2, '0');\n//         const seconds = String(time.getSeconds()).padStart(2, '0');\n//         const amOrPm = hours >= 12 ? 'PM' : 'AM';\n//         const twelveHourClock = hours % 12 || 12;\n//         return `${twelveHourClock}:${minutes}:${seconds} ${amOrPm}`;\n//     }\n\n//     return (\n\n//         <div>\n//             <Search data={data} setData={setData}/>\n//             <div className='tableSec'>\n//                 <table className='blueTable'>\n//                     <thead>\n//                         <tr>\n//                             <th>Date</th>\n//                             <th>Time</th>\n//                             <th>Pressure Value</th>\n//                             <th>Technician Name</th>\n//                             <th>Job Number</th>\n//                             <th>Serial Number</th>\n//                             {/* <th>Pass/Fail</th> */}\n//                             <th>Notes</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {data.map((row ) => (\n//                             <tr key={row.pressure_id}>\n//                                 <td>{formatDate(row.date_collected)}</td>\n//                                 <td>{formatTime(row.time_collected)}</td>\n//                                 <td>{row.pressure_value} PSI</td>\n//                                 <td>{row.tech_name}</td>\n//                                 <td>{row.job_num}</td>\n//                                 <td>{row.serial_num}</td>\n//                                 {/* <td>{row.pass_fail}</td> */}\n//                                 <td>{row.notes}</td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default Table;\n\n// TESTING CURRENTLY \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table(_ref) {\n  let {\n    data\n  } = _ref;\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-sec\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"blueTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Pressure Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Technician Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Job Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Serial Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.length > 0 && data.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.date_collected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.time_collected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.pressure_value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.tech_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.job_num\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.serial_num\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.notes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)]\n        }, row.pressure_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n_c = Table;\nexport default Table;\n\n// import './table.css';\n// import Search from '../search/search';\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n\n// function Table() {\n//   const [data, setData] = useState([]);\n//   const [originalData, setOriginalData] = useState([]);\n\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:3001/api/data')\n//       .then((response) => {\n//         setData(response.data);\n//         setOriginalData(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(error);\n//       });\n//   }, []);\n\n//   const filterData = useCallback(\n//     (filters) => {\n//       const filteredData = originalData.filter((row) => {\n//         for (let i = 0; i < filters.length; i++) {\n//           const filter = filters[i];\n//           const queryStr = filter.query.trim().toLowerCase();\n\n//           if (\n//             filter.type === 'name' &&\n//             !row.tech_name.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'pressure' &&\n//             !row.pressure_value.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'serialnum' &&\n//             !row.serial_num.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'date' &&\n//             !row.date_collected.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'jobnum' &&\n//             !row.job_num.includes(queryStr)\n//           ) {\n//             return false;\n//           }\n//         }\n//         return true;\n//       });\n//       setData(filteredData);\n//     },\n//     [originalData]\n//   );\n\n//   const handleFilterChange = useCallback(\n//     (filters) => {\n//       if (filters.length === 0) {\n//         setData(originalData);\n//       } else {\n//         filterData(filters);\n//       }\n//     },\n//     [originalData, filterData]\n//   );\n\n//   return (\n//     <div>\n//       <Search onFilterChange={handleFilterChange} />\n//       <table className='blueTable'>\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Time</th>\n//             <th>Pressure Value</th>\n//             <th>Technician Name</th>\n//             <th>Job Number</th>\n//             <th>Serial Number</th>\n//             <th>Pass/Fail</th>\n//             <th>Notes</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {data.map((row) => (\n//             <tr key={row.pressure_id}>\n//               <td>{row.date_collected}</td>\n//               <td>{row.time_collected}</td>\n//               <td>{row.pressure_value}</td>\n//               <td>{row.tech_name}</td>\n//               <td>{row.job_num}</td>\n//               <td>{row.serial_num}</td>\n//               <td>{row.pass_fail}</td>\n//               <td>{row.notes}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//         <tfoot>\n//             <tr>\n//                 <td colSpan=\"4\">\n//                     <div className=\"links\"><a href=\"#\">&laquo;</a> <a className=\"active\" href=\"#\">1</a> <a href=\"#\">2</a> <a href=\"#\">3</a> <a href=\"#\">4</a> <a href=\"#\">&raquo;</a></div>\n//                 </td>\n//             </tr>\n//         </tfoot>\n//     </table>\n// </div>\n// )\n// }\n\n// export default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["Search","React","useState","useEffect","axios","Table","data","console","log","length","map","row","date_collected","time_collected","pressure_value","tech_name","job_num","serial_num","notes","pressure_id"],"sources":["/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/Table/table.js"],"sourcesContent":["import './table.css';\nimport Search from '../search/search';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n\n// function Table() {\n\n\n//     const [data, setData] = useState([]);\n\n\n//     useEffect(() => {\n//         // Make an HTTP GET request to the backend server using Axios\n//         axios.get('http://localhost:3001/data')\n//           .then((response) => {\n//             // Set the data state variable with the response data\n//             setData(response.data);\n//             //console.log(data)\n//           })\n//           .catch((error) => {\n//             // Handle any errors that occur during the request\n//             console.error(error);\n//           });\n//       }, []);\n\n//     // Helper function to format the date string\n//     const formatDate = (dateString) => {\n//         if (!dateString) {\n//             return ''; // Return empty string if dateString is null or undefined\n//         }\n//         const date = new Date(dateString);\n//         const year = date.getFullYear();\n//         const month = String(date.getMonth() + 1).padStart(2, '0');\n//         const day = String(date.getDate()).padStart(2, '0');\n//         return `${month}-${day}-${year}`;\n//     }\n    \n//     const formatTime = (timeString) => {\n//         if (!timeString) {\n//             return ''; // Return empty string if timeString is null or undefined\n//         }\n//         const time = new Date(`1970-01-01T${timeString}`);\n//         const hours = time.getHours();\n//         const minutes = String(time.getMinutes()).padStart(2, '0');\n//         const seconds = String(time.getSeconds()).padStart(2, '0');\n//         const amOrPm = hours >= 12 ? 'PM' : 'AM';\n//         const twelveHourClock = hours % 12 || 12;\n//         return `${twelveHourClock}:${minutes}:${seconds} ${amOrPm}`;\n//     }\n    \n    \n\n//     return (\n\n//         <div>\n//             <Search data={data} setData={setData}/>\n//             <div className='tableSec'>\n//                 <table className='blueTable'>\n//                     <thead>\n//                         <tr>\n//                             <th>Date</th>\n//                             <th>Time</th>\n//                             <th>Pressure Value</th>\n//                             <th>Technician Name</th>\n//                             <th>Job Number</th>\n//                             <th>Serial Number</th>\n//                             {/* <th>Pass/Fail</th> */}\n//                             <th>Notes</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {data.map((row ) => (\n//                             <tr key={row.pressure_id}>\n//                                 <td>{formatDate(row.date_collected)}</td>\n//                                 <td>{formatTime(row.time_collected)}</td>\n//                                 <td>{row.pressure_value} PSI</td>\n//                                 <td>{row.tech_name}</td>\n//                                 <td>{row.job_num}</td>\n//                                 <td>{row.serial_num}</td>\n//                                 {/* <td>{row.pass_fail}</td> */}\n//                                 <td>{row.notes}</td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default Table;\n\n\n\n\n// TESTING CURRENTLY \n\n\n\nfunction Table({data}) {\n\n    console.log(data)\n\n    return (\n\n        <div className='table-sec'>\n            <table className='blueTable'>\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Time</th>\n                        <th>Pressure Value</th>\n                        <th>Technician Name</th>\n                        <th>Job Number</th>\n                        <th>Serial Number</th>\n                        {/* <th>Pass/Fail</th> */}\n                        <th>Notes</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.length > 0 && data.map((row ) => (\n                        <tr key={row.pressure_id}>\n                            <td>{row.date_collected}</td>\n                            <td>{row.time_collected}</td>\n                            <td>{row.pressure_value}</td>\n                            <td>{row.tech_name}</td>\n                            <td>{row.job_num}</td>\n                            <td>{row.serial_num}</td>\n                            {/* <td>{row.pass_fail}</td> */}\n                            <td>{row.notes}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import './table.css';\n// import Search from '../search/search';\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n\n// function Table() {\n//   const [data, setData] = useState([]);\n//   const [originalData, setOriginalData] = useState([]);\n\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:3001/api/data')\n//       .then((response) => {\n//         setData(response.data);\n//         setOriginalData(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(error);\n//       });\n//   }, []);\n\n//   const filterData = useCallback(\n//     (filters) => {\n//       const filteredData = originalData.filter((row) => {\n//         for (let i = 0; i < filters.length; i++) {\n//           const filter = filters[i];\n//           const queryStr = filter.query.trim().toLowerCase();\n\n//           if (\n//             filter.type === 'name' &&\n//             !row.tech_name.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'pressure' &&\n//             !row.pressure_value.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'serialnum' &&\n//             !row.serial_num.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'date' &&\n//             !row.date_collected.includes(queryStr)\n//           ) {\n//             return false;\n//           } else if (\n//             filter.type === 'jobnum' &&\n//             !row.job_num.includes(queryStr)\n//           ) {\n//             return false;\n//           }\n//         }\n//         return true;\n//       });\n//       setData(filteredData);\n//     },\n//     [originalData]\n//   );\n\n//   const handleFilterChange = useCallback(\n//     (filters) => {\n//       if (filters.length === 0) {\n//         setData(originalData);\n//       } else {\n//         filterData(filters);\n//       }\n//     },\n//     [originalData, filterData]\n//   );\n\n//   return (\n//     <div>\n//       <Search onFilterChange={handleFilterChange} />\n//       <table className='blueTable'>\n//         <thead>\n//           <tr>\n//             <th>Date</th>\n//             <th>Time</th>\n//             <th>Pressure Value</th>\n//             <th>Technician Name</th>\n//             <th>Job Number</th>\n//             <th>Serial Number</th>\n//             <th>Pass/Fail</th>\n//             <th>Notes</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {data.map((row) => (\n//             <tr key={row.pressure_id}>\n//               <td>{row.date_collected}</td>\n//               <td>{row.time_collected}</td>\n//               <td>{row.pressure_value}</td>\n//               <td>{row.tech_name}</td>\n//               <td>{row.job_num}</td>\n//               <td>{row.serial_num}</td>\n//               <td>{row.pass_fail}</td>\n//               <td>{row.notes}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//         <tfoot>\n//             <tr>\n//                 <td colSpan=\"4\">\n//                     <div className=\"links\"><a href=\"#\">&laquo;</a> <a className=\"active\" href=\"#\">1</a> <a href=\"#\">2</a> <a href=\"#\">3</a> <a href=\"#\">4</a> <a href=\"#\">&raquo;</a></div>\n//                 </td>\n//             </tr>\n//         </tfoot>\n//     </table>\n// </div>\n// )\n// }\n\n// export default Table;\n\n\n\n"],"mappings":";AAAA,OAAO,aAAa;AACpB,OAAOA,MAAM,MAAM,kBAAkB;AACrC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAGzB;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AAAA;AAIA,SAASC,KAAK,OAAS;EAAA,IAAR;IAACC;EAAI,CAAC;EAEjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,oBAEI;IAAK,SAAS,EAAC,WAAW;IAAA,uBACtB;MAAO,SAAS,EAAC,WAAW;MAAA,wBACxB;QAAA,uBACI;UAAA,wBACI;YAAA,UAAI;UAAI;YAAA;YAAA;YAAA;UAAA,QAAK,eACb;YAAA,UAAI;UAAI;YAAA;YAAA;YAAA;UAAA,QAAK,eACb;YAAA,UAAI;UAAc;YAAA;YAAA;YAAA;UAAA,QAAK,eACvB;YAAA,UAAI;UAAe;YAAA;YAAA;YAAA;UAAA,QAAK,eACxB;YAAA,UAAI;UAAU;YAAA;YAAA;YAAA;UAAA,QAAK,eACnB;YAAA,UAAI;UAAa;YAAA;YAAA;YAAA;UAAA,QAAK,eAEtB;YAAA,UAAI;UAAK;YAAA;YAAA;YAAA;UAAA,QAAK;QAAA;UAAA;UAAA;UAAA;QAAA;MACb;QAAA;QAAA;QAAA;MAAA,QACD,eACR;QAAA,UACKA,IAAI,CAACG,MAAM,GAAG,CAAC,IAAIH,IAAI,CAACI,GAAG,CAAEC,GAAG,iBAC7B;UAAA,wBACI;YAAA,UAAKA,GAAG,CAACC;UAAc;YAAA;YAAA;YAAA;UAAA,QAAM,eAC7B;YAAA,UAAKD,GAAG,CAACE;UAAc;YAAA;YAAA;YAAA;UAAA,QAAM,eAC7B;YAAA,UAAKF,GAAG,CAACG;UAAc;YAAA;YAAA;YAAA;UAAA,QAAM,eAC7B;YAAA,UAAKH,GAAG,CAACI;UAAS;YAAA;YAAA;YAAA;UAAA,QAAM,eACxB;YAAA,UAAKJ,GAAG,CAACK;UAAO;YAAA;YAAA;YAAA;UAAA,QAAM,eACtB;YAAA,UAAKL,GAAG,CAACM;UAAU;YAAA;YAAA;YAAA;UAAA,QAAM,eAEzB;YAAA,UAAKN,GAAG,CAACO;UAAK;YAAA;YAAA;YAAA;UAAA,QAAM;QAAA,GARfP,GAAG,CAACQ,WAAW;UAAA;UAAA;UAAA;QAAA,QAU3B;MAAC;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACN;AAEd;AAAC,KArCQd,KAAK;AAuCd,eAAeA,KAAK;;AAcp},"metadata":{},"sourceType":"module","externalDependencies":[]}