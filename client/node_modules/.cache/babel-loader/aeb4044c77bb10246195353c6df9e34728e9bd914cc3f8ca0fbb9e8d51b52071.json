{"ast":null,"code":"import './search.css';\nimport React, { useState } from 'react';\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\n\n// function Search(props){\n//   const { data, setData } = props;\n//   //const { characters, setFilteredCharacters } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n//   // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"name\">Name</option>\n//                       <option value=\"pressure\">Pressure Value</option>\n//                       <option value=\"date\">Date</option>\n//                       <option value=\"jobnum\">Job Number</option>\n//                       <option value=\"serialnum\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n\n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n//import React, { useState, useEffect } from 'react';\n\n// function Search(props) {\n//   const { onFilterChange } = props;\n\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Update the filter state when the input value changes\n//   const handleInputChange = (event, index) => {\n//     const newFilters = [...filters];\n//     newFilters[index].query = event.target.value;\n//     setFilters(newFilters);\n//   };\n\n//   // Add a new filter to the state\n//   const addFilter = () => {\n//     setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter from the state\n//   const removeFilter = (index) => {\n//     const newFilters = [...filters];\n//     newFilters.splice(index, 1);\n//     setFilters(newFilters);\n//   };\n\n//   // Apply the filters when the search button is clicked\n//   const handleSearch = () => {\n//     onFilterChange(filters);\n//   };\n\n//   // Reset the filters when the reset button is clicked\n//   const handleReset = () => {\n//     setFilters([{ type: 'name', query: '' }]);\n//     onFilterChange([]);\n//   };\n\n//   return (\n//     <div className='search-container'>\n//       {filters.map((filter, index) => (\n//         <div key={index} className='search-row'>\n//           <select\n//             value={filter.type}\n//             onChange={(event) => {\n//               const newFilters = [...filters];\n//               newFilters[index].type = event.target.value;\n//               setFilters(newFilters);\n//             }}\n//           >\n//             <option value='name'>Name</option>\n//             <option value='pressure'>Pressure</option>\n//             <option value='serialnum'>Serial Number</option>\n//             <option value='date'>Date</option>\n//             <option value='jobnum'>Job Number</option>\n//           </select>\n//           <input\n//             type='text'\n//             value={filter.query}\n//             onChange={(event) => handleInputChange(event, index)}\n//           />\n//           {index > 0 && (\n//             <button type='button' onClick={() => removeFilter(index)}>\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n//       <div className='search-row'>\n//         <button type='button' onClick={addFilter}>\n//           Add Filter\n//         </button>\n//         <button type='button' onClick={handleSearch}>\n//           Search\n//         </button>\n//         <button type='button' onClick={handleReset}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Search;","map":{"version":3,"names":["React","useState"],"sources":["/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js"],"sourcesContent":["import './search.css';\nimport React, { useState } from 'react';\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\n\n\n// function Search(props){\n//   const { data, setData } = props;\n//   //const { characters, setFilteredCharacters } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n//   // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"name\">Name</option>\n//                       <option value=\"pressure\">Pressure Value</option>\n//                       <option value=\"date\">Date</option>\n//                       <option value=\"jobnum\">Job Number</option>\n//                       <option value=\"serialnum\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n          \n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n\n\n\n//import React, { useState, useEffect } from 'react';\n\n// function Search(props) {\n//   const { onFilterChange } = props;\n\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Update the filter state when the input value changes\n//   const handleInputChange = (event, index) => {\n//     const newFilters = [...filters];\n//     newFilters[index].query = event.target.value;\n//     setFilters(newFilters);\n//   };\n\n//   // Add a new filter to the state\n//   const addFilter = () => {\n//     setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter from the state\n//   const removeFilter = (index) => {\n//     const newFilters = [...filters];\n//     newFilters.splice(index, 1);\n//     setFilters(newFilters);\n//   };\n\n//   // Apply the filters when the search button is clicked\n//   const handleSearch = () => {\n//     onFilterChange(filters);\n//   };\n\n//   // Reset the filters when the reset button is clicked\n//   const handleReset = () => {\n//     setFilters([{ type: 'name', query: '' }]);\n//     onFilterChange([]);\n//   };\n\n//   return (\n//     <div className='search-container'>\n//       {filters.map((filter, index) => (\n//         <div key={index} className='search-row'>\n//           <select\n//             value={filter.type}\n//             onChange={(event) => {\n//               const newFilters = [...filters];\n//               newFilters[index].type = event.target.value;\n//               setFilters(newFilters);\n//             }}\n//           >\n//             <option value='name'>Name</option>\n//             <option value='pressure'>Pressure</option>\n//             <option value='serialnum'>Serial Number</option>\n//             <option value='date'>Date</option>\n//             <option value='jobnum'>Job Number</option>\n//           </select>\n//           <input\n//             type='text'\n//             value={filter.query}\n//             onChange={(event) => handleInputChange(event, index)}\n//           />\n//           {index > 0 && (\n//             <button type='button' onClick={() => removeFilter(index)}>\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n//       <div className='search-row'>\n//         <button type='button' onClick={addFilter}>\n//           Add Filter\n//         </button>\n//         <button type='button' onClick={handleSearch}>\n//           Search\n//         </button>\n//         <button type='button' onClick={handleReset}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n"],"mappings":"AAAA,OAAO,cAAc;AACrB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}