{"ast":null,"code":"var _jsxFileName = \"/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/login/login.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  //   const handleLogin = async (e) => {\n  //     e.preventDefault();\n  //     try {\n  //       // Make a GET request to your backend API to retrieve all user records\n  //       const userRecords = await axios.get(`http://localhost:3001/login`);\n\n  //       // Loop through the user records to find a matching username and password\n  //       let userFound = false;\n  //       for (let user of userRecords.data) {\n  //         if (user.username === username && user.password === password) {\n  //           // If a matching username and password is found, set userFound to true and break out of the loop\n  //           userFound = true;\n  //           break;\n  //         }\n  //       }\n\n  //       // If no matching username and password is found, set an error message\n  //       if (!userFound) {\n  //         setErrorMessage('Invalid username or password');\n  //         return;\n  //       }\n\n  //       // If a matching username and password is found, redirect to the homepage\n  //       window.location.href = '/home';\n\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // };\n\n  const handleLogin = async event => {\n    _s();\n    event.preventDefault();\n    const response = await fetch('http://localhost:3001/login');\n    const data = await response.json();\n    const user = data.find(user => user.username === username);\n    if (user && user.password === password) {\n      // Login successful\n      const navigate = useNavigate();\n      navigate.push('/home');\n    } else {\n      // Login failed\n      setErrorMessage('Invalid username or password');\n      return;\n    }\n  };\n  _s(handleLogin, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n    return [useNavigate];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login Here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !username || !password,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"For login credentials contact amelia.trevino@students.tamuk.edu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s2(Login, \"q37Po17WbhPwv8Y2XJ4Bs6FUZXE=\");\n_c = Login;\nexport default Login;\n\n// try {\n//   // Make a GET request to your backend API to retrieve the user record that matches the entered username\n//   const userRecord = await axios.get(`http://localhost:3001/api/login?username=${username}`);\n\n//   if (userRecord.data.length === 0) {\n//     // If no user record is found, set an error message\n//     setErrorMessage('Invalid username or password');\n//     return;\n//   }\n\n//   // Check if the entered password matches the password of the retrieved user record with the same username\n//   if (userRecord.data[0].password === password) {\n//     // If the passwords match, redirect to the homepage\n//     window.location.href = '/home';\n\n//   } else {\n//     // If the passwords don't match, set an error message\n//     setErrorMessage('Invalid username or password');\n//   }\n// } catch (err) {\n//   console.log(err);\n// }\n// };\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","Link","axios","Login","username","setUsername","password","setPassword","errorMessage","setErrorMessage","handleLogin","event","preventDefault","response","fetch","data","json","user","find","navigate","push","e","target","value"],"sources":["/Users/ameliatrevino/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/login/login.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport \"./login.css\"\n\nconst Login = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n//   const handleLogin = async (e) => {\n//     e.preventDefault();\n//     try {\n//       // Make a GET request to your backend API to retrieve all user records\n//       const userRecords = await axios.get(`http://localhost:3001/login`);\n      \n//       // Loop through the user records to find a matching username and password\n//       let userFound = false;\n//       for (let user of userRecords.data) {\n//         if (user.username === username && user.password === password) {\n//           // If a matching username and password is found, set userFound to true and break out of the loop\n//           userFound = true;\n//           break;\n//         }\n//       }\n\n//       // If no matching username and password is found, set an error message\n//       if (!userFound) {\n//         setErrorMessage('Invalid username or password');\n//         return;\n//       }\n\n//       // If a matching username and password is found, redirect to the homepage\n//       window.location.href = '/home';\n      \n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n\nconst handleLogin = async (event) => {\n  event.preventDefault();\n  \n  const response = await fetch('http://localhost:3001/login');\n  const data = await response.json();\n\n  const user = data.find((user) => user.username === username);\n\n  if (user && user.password === password) {\n    // Login successful\n    const navigate = useNavigate();\n    navigate.push('/home');\n  } else {\n    // Login failed\n    setErrorMessage('Invalid username or password');\n    return;\n  }\n};\n\n    \n\n  return (\n    <div className=\"form-container\">\n      <h1>Login Here</h1>\n      <form onSubmit={handleLogin} >\n        <label>\n          Username:\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </label>\n        <br />\n        <label>\n          Password:\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </label>\n        <br />\n        {/* <Link to='/home'>\n           <button type=\"submit\">Login</button>\n        </Link> */}\n           {errorMessage && <p>{errorMessage}</p>}\n        <button type=\"submit\" disabled={!username || !password}>Login</button>\n      </form>\n      <p>For login credentials contact amelia.trevino@students.tamuk.edu</p>\n    </div>\n  );\n};\n\nexport default Login;\n\n\n\n\n// try {\n//   // Make a GET request to your backend API to retrieve the user record that matches the entered username\n//   const userRecord = await axios.get(`http://localhost:3001/api/login?username=${username}`);\n\n//   if (userRecord.data.length === 0) {\n//     // If no user record is found, set an error message\n//     setErrorMessage('Invalid username or password');\n//     return;\n//   }\n\n//   // Check if the entered password matches the password of the retrieved user record with the same username\n//   if (userRecord.data[0].password === password) {\n//     // If the passwords match, redirect to the homepage\n//     window.location.href = '/home';\n\n//   } else {\n//     // If the passwords don't match, set an error message\n//     setErrorMessage('Invalid username or password');\n//   }\n// } catch (err) {\n//   console.log(err);\n// }\n// };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}