{"ast":null,"code":"var _jsxFileName = \"/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js\",\n  _s = $RefreshSig$();\n//Current code: \n\n// import './search.css';\n// import React, { useState } from 'react';\n// function Search(props){\n//   const { data, setData } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n//   // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"tech_name\">Name</option>\n//                       <option value=\"pressure_value\">Pressure Value</option>\n//                       <option value=\"date_collected\">Date</option>\n//                       <option value=\"job_num\">Job Number</option>\n//                       <option value=\"serial_num\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n\n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n//Current Testing Code: \nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Search(props) {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const handleInputChange = event => {\n    const value = event.target.value;\n    setQuery(value);\n\n    // Filter the data based on the query\n    const filtered = props.data.filter(item => {\n      return item.date_collected.toLowerCase().includes(value.toLowerCase()) || item.time_collected.toLowerCase().includes(value.toLowerCase()) || item.pressure_value.toLowerCase().includes(value.toLowerCase()) || item.tech_name.toLowerCase().includes(value.toLowerCase()) || item.job_num.toLowerCase().includes(value.toLowerCase()) || item.serial_num.toLowerCase().includes(value.toLowerCase()) || item.notes.toLowerCase().includes(value.toLowerCase());\n    });\n    props.setFilteredData(filtered);\n  };\n  const handleReset = () => {\n    setQuery(\"\");\n    props.handleFilter([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: query,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"HYX2QbDDdTtlu7GfoQbAPZOIM6k=\");\n_c = Search;\nexport default Search;\n\n//import React, { useState, useEffect } from 'react';\n\n// function Search(props) {\n//   const { onFilterChange } = props;\n\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Update the filter state when the input value changes\n//   const handleInputChange = (event, index) => {\n//     const newFilters = [...filters];\n//     newFilters[index].query = event.target.value;\n//     setFilters(newFilters);\n//   };\n\n//   // Add a new filter to the state\n//   const addFilter = () => {\n//     setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter from the state\n//   const removeFilter = (index) => {\n//     const newFilters = [...filters];\n//     newFilters.splice(index, 1);\n//     setFilters(newFilters);\n//   };\n\n//   // Apply the filters when the search button is clicked\n//   const handleSearch = () => {\n//     onFilterChange(filters);\n//   };\n\n//   // Reset the filters when the reset button is clicked\n//   const handleReset = () => {\n//     setFilters([{ type: 'name', query: '' }]);\n//     onFilterChange([]);\n//   };\n\n//   return (\n//     <div className='search-container'>\n//       {filters.map((filter, index) => (\n//         <div key={index} className='search-row'>\n//           <select\n//             value={filter.type}\n//             onChange={(event) => {\n//               const newFilters = [...filters];\n//               newFilters[index].type = event.target.value;\n//               setFilters(newFilters);\n//             }}\n//           >\n//             <option value='name'>Name</option>\n//             <option value='pressure'>Pressure</option>\n//             <option value='serialnum'>Serial Number</option>\n//             <option value='date'>Date</option>\n//             <option value='jobnum'>Job Number</option>\n//           </select>\n//           <input\n//             type='text'\n//             value={filter.query}\n//             onChange={(event) => handleInputChange(event, index)}\n//           />\n//           {index > 0 && (\n//             <button type='button' onClick={() => removeFilter(index)}>\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n//       <div className='search-row'>\n//         <button type='button' onClick={addFilter}>\n//           Add Filter\n//         </button>\n//         <button type='button' onClick={handleSearch}>\n//           Search\n//         </button>\n//         <button type='button' onClick={handleReset}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","Search","props","query","setQuery","handleInputChange","event","value","target","filtered","data","filter","item","date_collected","toLowerCase","includes","time_collected","pressure_value","tech_name","job_num","serial_num","notes","setFilteredData","handleReset","handleFilter"],"sources":["/Users/mel/Library/Mobile Documents/com~apple~CloudDocs/Documents/Engineering Things/Programming/sd-database-project/client/src/components/search/search.js"],"sourcesContent":["//Current code: \n\n// import './search.css';\n// import React, { useState } from 'react';\n// function Search(props){\n//   const { data, setData } = props;\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//       const filteredData = data.filter((row) => {\n//           for (let i = 0; i < filters.length; i++) {\n//               const filter = filters[i];\n//               const queryStr = filter.query.trim().toLowerCase();\n\n//               if (filter.type === 'name' && !row.name.toLowerCase.includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'pressure' && !row.pressure.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'serialnum' && !row.serialnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }else if (filter.type === 'date' && !row.date.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               } else if (filter.type === 'jobnum' && !row.jobnum.toLowerCase().includes(queryStr)) {\n//                   return false;\n//               }\n//           }\n//           return true; // All filters passed\n//       });\n//       setData(filteredData);\n//   };\n\n//   // Add a new filter\n//   const addFilter = () => {\n//       setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter by index\n//   const removeFilter = (index) => {\n//       const newFilters = [...filters];\n//       newFilters.splice(index, 1);\n//       setFilters(newFilters);\n//   };\n\n//   return(\n//       <div className='filterSection'>\n//           {filters.map((filter, index) => (\n//               <div key={index}>\n//                   <input \n//                       type=\"text\" \n//                       placeholder=\"Search...\" \n//                       value={filter.query} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, query: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }} \n//                   />\n\n//                   <select \n//                       value={filter.type} \n//                       onChange={(e) => {\n//                           const newFilters = [...filters];\n//                           newFilters[index] = { ...filter, type: e.target.value };\n//                           setFilters(newFilters);\n//                           filterData(); // Filter the data dynamically\n//                       }}\n//                   >\n//                       <option value=\"tech_name\">Name</option>\n//                       <option value=\"pressure_value\">Pressure Value</option>\n//                       <option value=\"date_collected\">Date</option>\n//                       <option value=\"job_num\">Job Number</option>\n//                       <option value=\"serial_num\">Serial Number</option>\n//                   </select>\n\n//                   <button onClick={() => removeFilter(index)}>X</button>\n//               </div>\n//           ))}\n          \n//           <button onClick={addFilter}>Add filter</button>\n//           <button onClick={filterData}>Filter</button>\n//           <button onClick={() => {setData(data); setFilters([{ type: 'name', query: '' }]);}}>Reset</button>\n//       </div>\n//   )\n// }\n\n// export default Search;\n\n\n\n//Current Testing Code: \nimport { useState } from \"react\";\n\nfunction Search(props) {\n  const [query, setQuery] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    const value = event.target.value;\n    setQuery(value);\n\n    // Filter the data based on the query\n    const filtered = props.data.filter((item) => {\n      return (\n        item.date_collected.toLowerCase().includes(value.toLowerCase()) ||\n        item.time_collected.toLowerCase().includes(value.toLowerCase()) ||\n        item.pressure_value.toLowerCase().includes(value.toLowerCase()) ||\n        item.tech_name.toLowerCase().includes(value.toLowerCase()) ||\n        item.job_num.toLowerCase().includes(value.toLowerCase()) ||\n        item.serial_num.toLowerCase().includes(value.toLowerCase()) ||\n        item.notes.toLowerCase().includes(value.toLowerCase())\n      );\n    });\n\n    props.setFilteredData(filtered);\n  };\n\n  const handleReset = () => {\n    setQuery(\"\");\n    props.handleFilter([]);\n  };\n\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={handleInputChange}\n      />\n      <button onClick={handleReset}>Reset</button>\n    </div>\n  );\n}\n\nexport default Search;\n\n\n\n\n\n\n\n\n\n\n\n//import React, { useState, useEffect } from 'react';\n\n// function Search(props) {\n//   const { onFilterChange } = props;\n\n//   const [filters, setFilters] = useState([{ type: 'name', query: '' }]);\n\n//   // Update the filter state when the input value changes\n//   const handleInputChange = (event, index) => {\n//     const newFilters = [...filters];\n//     newFilters[index].query = event.target.value;\n//     setFilters(newFilters);\n//   };\n\n//   // Add a new filter to the state\n//   const addFilter = () => {\n//     setFilters([...filters, { type: 'name', query: '' }]);\n//   };\n\n//   // Remove a filter from the state\n//   const removeFilter = (index) => {\n//     const newFilters = [...filters];\n//     newFilters.splice(index, 1);\n//     setFilters(newFilters);\n//   };\n\n//   // Apply the filters when the search button is clicked\n//   const handleSearch = () => {\n//     onFilterChange(filters);\n//   };\n\n//   // Reset the filters when the reset button is clicked\n//   const handleReset = () => {\n//     setFilters([{ type: 'name', query: '' }]);\n//     onFilterChange([]);\n//   };\n\n//   return (\n//     <div className='search-container'>\n//       {filters.map((filter, index) => (\n//         <div key={index} className='search-row'>\n//           <select\n//             value={filter.type}\n//             onChange={(event) => {\n//               const newFilters = [...filters];\n//               newFilters[index].type = event.target.value;\n//               setFilters(newFilters);\n//             }}\n//           >\n//             <option value='name'>Name</option>\n//             <option value='pressure'>Pressure</option>\n//             <option value='serialnum'>Serial Number</option>\n//             <option value='date'>Date</option>\n//             <option value='jobnum'>Job Number</option>\n//           </select>\n//           <input\n//             type='text'\n//             value={filter.query}\n//             onChange={(event) => handleInputChange(event, index)}\n//           />\n//           {index > 0 && (\n//             <button type='button' onClick={() => removeFilter(index)}>\n//               X\n//             </button>\n//           )}\n//         </div>\n//       ))}\n//       <div className='search-row'>\n//         <button type='button' onClick={addFilter}>\n//           Add Filter\n//         </button>\n//         <button type='button' onClick={handleSearch}>\n//           Search\n//         </button>\n//         <button type='button' onClick={handleReset}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Search;\n\n\n\n// function Search (props) {\n//   const { data, setData } = props;\n//   const [query, setQuery] = useState('');\n//   const [filterType, setFilterType] = useState('id'); // Default filter type is ID\n\n//   // Filter the data based on the query string and filter type\n//   const filterData = () => {\n//     const filteredData = data.filter((row) => {\n//       const queryStr = query.trim().toLowerCase();\n\n//       if (filterType === 'pressure_id') {\n//         // Check for a match against the ID column\n//         return String(row.id).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'date_collected') {\n//         const date = new Date(row.date); // Assuming the date is stored as a string in ISO format\n//         const queryDate = new Date(queryStr);\n//         // Check for a match against the date column or time column\n//         return date.toDateString() === queryDate.toDateString() || date.toLocaleTimeString().includes(queryStr);\n//       } else if (filterType === 'pressure_value'){\n//         return String(row.value).startsWith(parseInt(queryStr));\n//       }else if (filterType === 'tech_name') {\n//         // Check for a match against the name column\n//         return row.name.toLowerCase().includes(queryStr);\n//       } else if (filterType === 'serial_num') {\n//         // Check for a match against the email column\n//         return String(row.serial).startsWith(parseInt(queryStr));\n//       } else if (filterType === 'pass_fail'){\n//         return row.test.toLowerCase().includes(queryStr);\n//       }else {\n//         return true; // No filter type selected, return all rows\n//       }\n//     });\n\n//     setData(filteredData);\n//   };\n\n//   return (\n//     <div className='filterSection'>\n//       <input type=\"text\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} />\n\n//       <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n//         <option value=\"id\">ID</option>\n//         <option value=\"date\">Date</option>\n//         <option value=\"value\">Pressure Value</option>\n//         <option value=\"name\">Name</option>\n//         <option value=\"serial\">Serial Number</option>\n//         <option value=\"test\">Test Scoring</option>\n//       </select>\n\n//       <button onClick={filterData}>Filter</button>\n//       <button onClick={() => setData(data)}>Reset</button>\n//     </div>\n//   );\n// }"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,MAAM,CAACC,KAAK,EAAE;EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMK,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChCH,QAAQ,CAACG,KAAK,CAAC;;IAEf;IACA,MAAME,QAAQ,GAAGP,KAAK,CAACQ,IAAI,CAACC,MAAM,CAAEC,IAAI,IAAK;MAC3C,OACEA,IAAI,CAACC,cAAc,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,IAC/DF,IAAI,CAACI,cAAc,CAACF,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,IAC/DF,IAAI,CAACK,cAAc,CAACH,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,IAC/DF,IAAI,CAACM,SAAS,CAACJ,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,IAC1DF,IAAI,CAACO,OAAO,CAACL,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,IACxDF,IAAI,CAACQ,UAAU,CAACN,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,IAC3DF,IAAI,CAACS,KAAK,CAACP,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC;IAE1D,CAAC,CAAC;IAEFZ,KAAK,CAACoB,eAAe,CAACb,QAAQ,CAAC;EACjC,CAAC;EAED,MAAMc,WAAW,GAAG,MAAM;IACxBnB,QAAQ,CAAC,EAAE,CAAC;IACZF,KAAK,CAACsB,YAAY,CAAC,EAAE,CAAC;EACxB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,QAAQ;IAAA,wBACrB;MACE,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,WAAW;MACvB,KAAK,EAAErB,KAAM;MACb,QAAQ,EAAEE;IAAkB;MAAA;MAAA;MAAA;IAAA,QAC5B,eACF;MAAQ,OAAO,EAAEkB,WAAY;MAAA,UAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACxC;AAEV;AAAC,GAvCQtB,MAAM;AAAA,KAANA,MAAM;AAyCf,eAAeA,MAAM;;AAYrB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}